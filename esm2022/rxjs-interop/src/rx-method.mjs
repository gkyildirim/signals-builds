import { assertInInjectionContext, DestroyRef, effect, inject, Injector, isSignal, untracked, } from '@angular/core';
import { isObservable, noop, Subject } from 'rxjs';
export function rxMethod(generator, config) {
    if (!config?.injector) {
        assertInInjectionContext(rxMethod);
    }
    const sourceInjector = config?.injector ?? inject(Injector);
    const source$ = new Subject();
    const sourceSub = generator(source$).subscribe();
    sourceInjector.get(DestroyRef).onDestroy(() => sourceSub.unsubscribe());
    const rxMethodFn = (input, config) => {
        if (isStatic(input)) {
            source$.next(input);
            return { unsubscribe: noop };
        }
        const instanceInjector = config?.injector ?? getCallerInjector() ?? sourceInjector;
        if (isSignal(input)) {
            const watcher = effect(() => {
                const value = input();
                untracked(() => source$.next(value));
            }, { injector: instanceInjector });
            const instanceSub = { unsubscribe: () => watcher.destroy() };
            sourceSub.add(instanceSub);
            return instanceSub;
        }
        const instanceSub = input.subscribe((value) => source$.next(value));
        sourceSub.add(instanceSub);
        if (instanceInjector !== sourceInjector) {
            instanceInjector
                .get(DestroyRef)
                .onDestroy(() => instanceSub.unsubscribe());
        }
        return instanceSub;
    };
    rxMethodFn.unsubscribe = sourceSub.unsubscribe.bind(sourceSub);
    return rxMethodFn;
}
function isStatic(value) {
    return !isSignal(value) && !isObservable(value);
}
function getCallerInjector() {
    try {
        return inject(Injector);
    }
    catch {
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtbWV0aG9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zaWduYWxzL3J4anMtaW50ZXJvcC9zcmMvcngtbWV0aG9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsVUFBVSxFQUNWLE1BQU0sRUFDTixNQUFNLEVBQ04sUUFBUSxFQUNSLFFBQVEsRUFFUixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQWMsT0FBTyxFQUFrQixNQUFNLE1BQU0sQ0FBQztBQVEvRSxNQUFNLFVBQVUsUUFBUSxDQUN0QixTQUE4RCxFQUM5RCxNQUFnQztJQUVoQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQ3RCLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLGNBQWMsR0FBRyxNQUFNLEVBQUUsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RCxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFDO0lBQ3JDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNqRCxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUV4RSxNQUFNLFVBQVUsR0FBRyxDQUNqQixLQUFnRCxFQUNoRCxNQUFnQyxFQUNoQyxFQUFFO1FBQ0YsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNwQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sZ0JBQWdCLEdBQ3BCLE1BQU0sRUFBRSxRQUFRLElBQUksaUJBQWlCLEVBQUUsSUFBSSxjQUFjLENBQUM7UUFFNUQsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNwQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQ3BCLEdBQUcsRUFBRTtnQkFDSCxNQUFNLEtBQUssR0FBRyxLQUFLLEVBQUUsQ0FBQztnQkFDdEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN2QyxDQUFDLEVBQ0QsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsQ0FDL0IsQ0FBQztZQUNGLE1BQU0sV0FBVyxHQUFHLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBQzdELFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFM0IsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQztRQUVELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNwRSxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTNCLElBQUksZ0JBQWdCLEtBQUssY0FBYyxFQUFFLENBQUM7WUFDeEMsZ0JBQWdCO2lCQUNiLEdBQUcsQ0FBQyxVQUFVLENBQUM7aUJBQ2YsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELENBQUM7UUFFRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDLENBQUM7SUFDRixVQUFVLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRS9ELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBSSxLQUFvQztJQUN2RCxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRCxTQUFTLGlCQUFpQjtJQUN4QixJQUFJLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBQUMsTUFBTSxDQUFDO1FBQ1AsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFzc2VydEluSW5qZWN0aW9uQ29udGV4dCxcbiAgRGVzdHJveVJlZixcbiAgZWZmZWN0LFxuICBpbmplY3QsXG4gIEluamVjdG9yLFxuICBpc1NpZ25hbCxcbiAgU2lnbmFsLFxuICB1bnRyYWNrZWQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBub29wLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBVbnN1YnNjcmliYWJsZSB9IGZyb20gJ3J4anMnO1xuXG50eXBlIFJ4TWV0aG9kPElucHV0PiA9ICgoXG4gIGlucHV0OiBJbnB1dCB8IFNpZ25hbDxJbnB1dD4gfCBPYnNlcnZhYmxlPElucHV0PixcbiAgY29uZmlnPzogeyBpbmplY3Rvcj86IEluamVjdG9yIH1cbikgPT4gVW5zdWJzY3JpYmFibGUpICZcbiAgVW5zdWJzY3JpYmFibGU7XG5cbmV4cG9ydCBmdW5jdGlvbiByeE1ldGhvZDxJbnB1dD4oXG4gIGdlbmVyYXRvcjogKHNvdXJjZSQ6IE9ic2VydmFibGU8SW5wdXQ+KSA9PiBPYnNlcnZhYmxlPHVua25vd24+LFxuICBjb25maWc/OiB7IGluamVjdG9yPzogSW5qZWN0b3IgfVxuKTogUnhNZXRob2Q8SW5wdXQ+IHtcbiAgaWYgKCFjb25maWc/LmluamVjdG9yKSB7XG4gICAgYXNzZXJ0SW5JbmplY3Rpb25Db250ZXh0KHJ4TWV0aG9kKTtcbiAgfVxuXG4gIGNvbnN0IHNvdXJjZUluamVjdG9yID0gY29uZmlnPy5pbmplY3RvciA/PyBpbmplY3QoSW5qZWN0b3IpO1xuICBjb25zdCBzb3VyY2UkID0gbmV3IFN1YmplY3Q8SW5wdXQ+KCk7XG4gIGNvbnN0IHNvdXJjZVN1YiA9IGdlbmVyYXRvcihzb3VyY2UkKS5zdWJzY3JpYmUoKTtcbiAgc291cmNlSW5qZWN0b3IuZ2V0KERlc3Ryb3lSZWYpLm9uRGVzdHJveSgoKSA9PiBzb3VyY2VTdWIudW5zdWJzY3JpYmUoKSk7XG5cbiAgY29uc3QgcnhNZXRob2RGbiA9IChcbiAgICBpbnB1dDogSW5wdXQgfCBTaWduYWw8SW5wdXQ+IHwgT2JzZXJ2YWJsZTxJbnB1dD4sXG4gICAgY29uZmlnPzogeyBpbmplY3Rvcj86IEluamVjdG9yIH1cbiAgKSA9PiB7XG4gICAgaWYgKGlzU3RhdGljKGlucHV0KSkge1xuICAgICAgc291cmNlJC5uZXh0KGlucHV0KTtcbiAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiBub29wIH07XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VJbmplY3RvciA9XG4gICAgICBjb25maWc/LmluamVjdG9yID8/IGdldENhbGxlckluamVjdG9yKCkgPz8gc291cmNlSW5qZWN0b3I7XG5cbiAgICBpZiAoaXNTaWduYWwoaW5wdXQpKSB7XG4gICAgICBjb25zdCB3YXRjaGVyID0gZWZmZWN0KFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBpbnB1dCgpO1xuICAgICAgICAgIHVudHJhY2tlZCgoKSA9PiBzb3VyY2UkLm5leHQodmFsdWUpKTtcbiAgICAgICAgfSxcbiAgICAgICAgeyBpbmplY3RvcjogaW5zdGFuY2VJbmplY3RvciB9XG4gICAgICApO1xuICAgICAgY29uc3QgaW5zdGFuY2VTdWIgPSB7IHVuc3Vic2NyaWJlOiAoKSA9PiB3YXRjaGVyLmRlc3Ryb3koKSB9O1xuICAgICAgc291cmNlU3ViLmFkZChpbnN0YW5jZVN1Yik7XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZVN1YjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZVN1YiA9IGlucHV0LnN1YnNjcmliZSgodmFsdWUpID0+IHNvdXJjZSQubmV4dCh2YWx1ZSkpO1xuICAgIHNvdXJjZVN1Yi5hZGQoaW5zdGFuY2VTdWIpO1xuXG4gICAgaWYgKGluc3RhbmNlSW5qZWN0b3IgIT09IHNvdXJjZUluamVjdG9yKSB7XG4gICAgICBpbnN0YW5jZUluamVjdG9yXG4gICAgICAgIC5nZXQoRGVzdHJveVJlZilcbiAgICAgICAgLm9uRGVzdHJveSgoKSA9PiBpbnN0YW5jZVN1Yi51bnN1YnNjcmliZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2VTdWI7XG4gIH07XG4gIHJ4TWV0aG9kRm4udW5zdWJzY3JpYmUgPSBzb3VyY2VTdWIudW5zdWJzY3JpYmUuYmluZChzb3VyY2VTdWIpO1xuXG4gIHJldHVybiByeE1ldGhvZEZuO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRpYzxUPih2YWx1ZTogVCB8IFNpZ25hbDxUPiB8IE9ic2VydmFibGU8VD4pOiB2YWx1ZSBpcyBUIHtcbiAgcmV0dXJuICFpc1NpZ25hbCh2YWx1ZSkgJiYgIWlzT2JzZXJ2YWJsZSh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGdldENhbGxlckluamVjdG9yKCk6IEluamVjdG9yIHwgbnVsbCB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGluamVjdChJbmplY3Rvcik7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=