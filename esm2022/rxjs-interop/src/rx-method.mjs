import { assertInInjectionContext, DestroyRef, effect, inject, Injector, isSignal, untracked, } from '@angular/core';
import { isObservable, noop, Subject } from 'rxjs';
export function rxMethod(generator, config) {
    if (!config?.injector) {
        assertInInjectionContext(rxMethod);
    }
    const injector = config?.injector ?? inject(Injector);
    const destroyRef = injector.get(DestroyRef);
    const source$ = new Subject();
    const sourceSub = generator(source$).subscribe();
    destroyRef.onDestroy(() => sourceSub.unsubscribe());
    const rxMethodFn = (input) => {
        if (isSignal(input)) {
            const watcher = effect(() => {
                const value = input();
                untracked(() => source$.next(value));
            }, { injector });
            const instanceSub = { unsubscribe: () => watcher.destroy() };
            sourceSub.add(instanceSub);
            return instanceSub;
        }
        if (isObservable(input)) {
            const instanceSub = input.subscribe((value) => source$.next(value));
            sourceSub.add(instanceSub);
            return instanceSub;
        }
        source$.next(input);
        return { unsubscribe: noop };
    };
    rxMethodFn.unsubscribe = sourceSub.unsubscribe.bind(sourceSub);
    return rxMethodFn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtbWV0aG9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zaWduYWxzL3J4anMtaW50ZXJvcC9zcmMvcngtbWV0aG9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsVUFBVSxFQUNWLE1BQU0sRUFDTixNQUFNLEVBQ04sUUFBUSxFQUNSLFFBQVEsRUFFUixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQWMsT0FBTyxFQUFrQixNQUFNLE1BQU0sQ0FBQztBQU8vRSxNQUFNLFVBQVUsUUFBUSxDQUN0QixTQUE4RCxFQUM5RCxNQUFnQztJQUVoQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQ3RCLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLEVBQUUsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0RCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFTLENBQUM7SUFFckMsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pELFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFFcEQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFnRCxFQUFFLEVBQUU7UUFDdEUsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNwQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQ3BCLEdBQUcsRUFBRTtnQkFDSCxNQUFNLEtBQUssR0FBRyxLQUFLLEVBQUUsQ0FBQztnQkFDdEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN2QyxDQUFDLEVBQ0QsRUFBRSxRQUFRLEVBQUUsQ0FDYixDQUFDO1lBQ0YsTUFBTSxXQUFXLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDN0QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUUzQixPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDO1FBRUQsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN4QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDcEUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUUzQixPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDO1FBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUMsQ0FBQztJQUNGLFVBQVUsQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFL0QsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFzc2VydEluSW5qZWN0aW9uQ29udGV4dCxcbiAgRGVzdHJveVJlZixcbiAgZWZmZWN0LFxuICBpbmplY3QsXG4gIEluamVjdG9yLFxuICBpc1NpZ25hbCxcbiAgU2lnbmFsLFxuICB1bnRyYWNrZWQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBub29wLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBVbnN1YnNjcmliYWJsZSB9IGZyb20gJ3J4anMnO1xuXG50eXBlIFJ4TWV0aG9kPElucHV0PiA9ICgoXG4gIGlucHV0OiBJbnB1dCB8IFNpZ25hbDxJbnB1dD4gfCBPYnNlcnZhYmxlPElucHV0PlxuKSA9PiBVbnN1YnNjcmliYWJsZSkgJlxuICBVbnN1YnNjcmliYWJsZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ4TWV0aG9kPElucHV0PihcbiAgZ2VuZXJhdG9yOiAoc291cmNlJDogT2JzZXJ2YWJsZTxJbnB1dD4pID0+IE9ic2VydmFibGU8dW5rbm93bj4sXG4gIGNvbmZpZz86IHsgaW5qZWN0b3I/OiBJbmplY3RvciB9XG4pOiBSeE1ldGhvZDxJbnB1dD4ge1xuICBpZiAoIWNvbmZpZz8uaW5qZWN0b3IpIHtcbiAgICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQocnhNZXRob2QpO1xuICB9XG5cbiAgY29uc3QgaW5qZWN0b3IgPSBjb25maWc/LmluamVjdG9yID8/IGluamVjdChJbmplY3Rvcik7XG4gIGNvbnN0IGRlc3Ryb3lSZWYgPSBpbmplY3Rvci5nZXQoRGVzdHJveVJlZik7XG4gIGNvbnN0IHNvdXJjZSQgPSBuZXcgU3ViamVjdDxJbnB1dD4oKTtcblxuICBjb25zdCBzb3VyY2VTdWIgPSBnZW5lcmF0b3Ioc291cmNlJCkuc3Vic2NyaWJlKCk7XG4gIGRlc3Ryb3lSZWYub25EZXN0cm95KCgpID0+IHNvdXJjZVN1Yi51bnN1YnNjcmliZSgpKTtcblxuICBjb25zdCByeE1ldGhvZEZuID0gKGlucHV0OiBJbnB1dCB8IFNpZ25hbDxJbnB1dD4gfCBPYnNlcnZhYmxlPElucHV0PikgPT4ge1xuICAgIGlmIChpc1NpZ25hbChpbnB1dCkpIHtcbiAgICAgIGNvbnN0IHdhdGNoZXIgPSBlZmZlY3QoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGlucHV0KCk7XG4gICAgICAgICAgdW50cmFja2VkKCgpID0+IHNvdXJjZSQubmV4dCh2YWx1ZSkpO1xuICAgICAgICB9LFxuICAgICAgICB7IGluamVjdG9yIH1cbiAgICAgICk7XG4gICAgICBjb25zdCBpbnN0YW5jZVN1YiA9IHsgdW5zdWJzY3JpYmU6ICgpID0+IHdhdGNoZXIuZGVzdHJveSgpIH07XG4gICAgICBzb3VyY2VTdWIuYWRkKGluc3RhbmNlU3ViKTtcblxuICAgICAgcmV0dXJuIGluc3RhbmNlU3ViO1xuICAgIH1cblxuICAgIGlmIChpc09ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZVN1YiA9IGlucHV0LnN1YnNjcmliZSgodmFsdWUpID0+IHNvdXJjZSQubmV4dCh2YWx1ZSkpO1xuICAgICAgc291cmNlU3ViLmFkZChpbnN0YW5jZVN1Yik7XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZVN1YjtcbiAgICB9XG5cbiAgICBzb3VyY2UkLm5leHQoaW5wdXQpO1xuICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiBub29wIH07XG4gIH07XG4gIHJ4TWV0aG9kRm4udW5zdWJzY3JpYmUgPSBzb3VyY2VTdWIudW5zdWJzY3JpYmUuYmluZChzb3VyY2VTdWIpO1xuXG4gIHJldHVybiByeE1ldGhvZEZuO1xufVxuIl19