import { computed } from '@angular/core';
import { assertUniqueStoreMembers } from './signal-store-assertions';
import { toDeepSignal } from './deep-signal';
import { STATE_SOURCE } from './state-source';
export function withState(stateOrFactory) {
    return (store) => {
        const state = typeof stateOrFactory === 'function' ? stateOrFactory() : stateOrFactory;
        const stateKeys = Object.keys(state);
        assertUniqueStoreMembers(store, stateKeys);
        store[STATE_SOURCE].update((currentState) => ({
            ...currentState,
            ...state,
        }));
        const stateSignals = stateKeys.reduce((acc, key) => {
            const sliceSignal = computed(() => store[STATE_SOURCE]()[key]);
            return { ...acc, [key]: toDeepSignal(sliceSignal) };
        }, {});
        return {
            ...store,
            stateSignals: { ...store.stateSignals, ...stateSignals },
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC1zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL21vZHVsZXMvc2lnbmFscy9zcmMvd2l0aC1zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBcUI5QyxNQUFNLFVBQVUsU0FBUyxDQUN2QixjQUFxQztJQUtyQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDZixNQUFNLEtBQUssR0FDVCxPQUFPLGNBQWMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFDM0UsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFM0MsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM1QyxHQUFHLFlBQVk7WUFDZixHQUFHLEtBQUs7U0FDVCxDQUFDLENBQUMsQ0FBQztRQUVKLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakQsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUMxQixHQUFHLEVBQUUsQ0FBRSxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQThCLENBQUMsR0FBRyxDQUFDLENBQzlELENBQUM7WUFDRixPQUFPLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUN0RCxDQUFDLEVBQUUsRUFBdUIsQ0FBQyxDQUFDO1FBRTVCLE9BQU87WUFDTCxHQUFHLEtBQUs7WUFDUixZQUFZLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxZQUFZLEVBQUU7U0FDOUIsQ0FBQztJQUMvQixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFzc2VydFVuaXF1ZVN0b3JlTWVtYmVycyB9IGZyb20gJy4vc2lnbmFsLXN0b3JlLWFzc2VydGlvbnMnO1xuaW1wb3J0IHsgdG9EZWVwU2lnbmFsIH0gZnJvbSAnLi9kZWVwLXNpZ25hbCc7XG5pbXBvcnQgeyBTVEFURV9TT1VSQ0UgfSBmcm9tICcuL3N0YXRlLXNvdXJjZSc7XG5pbXBvcnQge1xuICBFbXB0eUZlYXR1cmVSZXN1bHQsXG4gIElubmVyU2lnbmFsU3RvcmUsXG4gIFNpZ25hbHNEaWN0aW9uYXJ5LFxuICBTaWduYWxTdG9yZUZlYXR1cmUsXG4gIFNpZ25hbFN0b3JlRmVhdHVyZVJlc3VsdCxcbn0gZnJvbSAnLi9zaWduYWwtc3RvcmUtbW9kZWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTdGF0ZTxTdGF0ZSBleHRlbmRzIG9iamVjdD4oXG4gIHN0YXRlRmFjdG9yeTogKCkgPT4gU3RhdGVcbik6IFNpZ25hbFN0b3JlRmVhdHVyZTxcbiAgRW1wdHlGZWF0dXJlUmVzdWx0LFxuICB7IHN0YXRlOiBTdGF0ZTsgY29tcHV0ZWQ6IHt9OyBtZXRob2RzOiB7fSB9XG4+O1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTdGF0ZTxTdGF0ZSBleHRlbmRzIG9iamVjdD4oXG4gIHN0YXRlOiBTdGF0ZVxuKTogU2lnbmFsU3RvcmVGZWF0dXJlPFxuICBFbXB0eUZlYXR1cmVSZXN1bHQsXG4gIHsgc3RhdGU6IFN0YXRlOyBjb21wdXRlZDoge307IG1ldGhvZHM6IHt9IH1cbj47XG5leHBvcnQgZnVuY3Rpb24gd2l0aFN0YXRlPFN0YXRlIGV4dGVuZHMgb2JqZWN0PihcbiAgc3RhdGVPckZhY3Rvcnk6IFN0YXRlIHwgKCgpID0+IFN0YXRlKVxuKTogU2lnbmFsU3RvcmVGZWF0dXJlPFxuICBTaWduYWxTdG9yZUZlYXR1cmVSZXN1bHQsXG4gIHsgc3RhdGU6IFN0YXRlOyBjb21wdXRlZDoge307IG1ldGhvZHM6IHt9IH1cbj4ge1xuICByZXR1cm4gKHN0b3JlKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPVxuICAgICAgdHlwZW9mIHN0YXRlT3JGYWN0b3J5ID09PSAnZnVuY3Rpb24nID8gc3RhdGVPckZhY3RvcnkoKSA6IHN0YXRlT3JGYWN0b3J5O1xuICAgIGNvbnN0IHN0YXRlS2V5cyA9IE9iamVjdC5rZXlzKHN0YXRlKTtcblxuICAgIGFzc2VydFVuaXF1ZVN0b3JlTWVtYmVycyhzdG9yZSwgc3RhdGVLZXlzKTtcblxuICAgIHN0b3JlW1NUQVRFX1NPVVJDRV0udXBkYXRlKChjdXJyZW50U3RhdGUpID0+ICh7XG4gICAgICAuLi5jdXJyZW50U3RhdGUsXG4gICAgICAuLi5zdGF0ZSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCBzdGF0ZVNpZ25hbHMgPSBzdGF0ZUtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgY29uc3Qgc2xpY2VTaWduYWwgPSBjb21wdXRlZChcbiAgICAgICAgKCkgPT4gKHN0b3JlW1NUQVRFX1NPVVJDRV0oKSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPilba2V5XVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7IC4uLmFjYywgW2tleV06IHRvRGVlcFNpZ25hbChzbGljZVNpZ25hbCkgfTtcbiAgICB9LCB7fSBhcyBTaWduYWxzRGljdGlvbmFyeSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3RvcmUsXG4gICAgICBzdGF0ZVNpZ25hbHM6IHsgLi4uc3RvcmUuc3RhdGVTaWduYWxzLCAuLi5zdGF0ZVNpZ25hbHMgfSxcbiAgICB9IGFzIElubmVyU2lnbmFsU3RvcmU8U3RhdGU+O1xuICB9O1xufVxuIl19