import { assertInInjectionContext, DestroyRef, inject, Injector, untracked, } from '@angular/core';
import { SIGNAL } from '@angular/core/primitives/signals';
const STATE_WATCHERS = new WeakMap();
export const STATE_SOURCE = Symbol('STATE_SOURCE');
export function patchState(stateSource, ...updaters) {
    stateSource[STATE_SOURCE].update((currentState) => updaters.reduce((nextState, updater) => ({
        ...nextState,
        ...(typeof updater === 'function' ? updater(nextState) : updater),
    }), currentState));
    notifyWatchers(stateSource);
}
export function getState(stateSource) {
    return stateSource[STATE_SOURCE]();
}
export function watchState(stateSource, watcher, config) {
    if (!config?.injector) {
        assertInInjectionContext(watchState);
    }
    const injector = config?.injector ?? inject(Injector);
    const destroyRef = injector.get(DestroyRef);
    addWatcher(stateSource, watcher);
    watcher(getState(stateSource));
    const destroy = () => removeWatcher(stateSource, watcher);
    destroyRef.onDestroy(destroy);
    return { destroy };
}
function getWatchers(stateSource) {
    return STATE_WATCHERS.get(stateSource[STATE_SOURCE][SIGNAL]) || [];
}
function notifyWatchers(stateSource) {
    const watchers = getWatchers(stateSource);
    for (const watcher of watchers) {
        const state = untracked(() => getState(stateSource));
        watcher(state);
    }
}
function addWatcher(stateSource, watcher) {
    const watchers = getWatchers(stateSource);
    STATE_WATCHERS.set(stateSource[STATE_SOURCE][SIGNAL], [
        ...watchers,
        watcher,
    ]);
}
function removeWatcher(stateSource, watcher) {
    const watchers = getWatchers(stateSource);
    STATE_WATCHERS.set(stateSource[STATE_SOURCE][SIGNAL], watchers.filter((w) => w !== watcher));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtc291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zaWduYWxzL3NyYy9zdGF0ZS1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixVQUFVLEVBQ1YsTUFBTSxFQUNOLFFBQVEsRUFFUixTQUFTLEdBRVYsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRzFELE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxFQUFvQyxDQUFDO0FBRXZFLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFrQm5ELE1BQU0sVUFBVSxVQUFVLENBQ3hCLFdBQXVDLEVBQ3ZDLEdBQUcsUUFFRjtJQUVELFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUNoRCxRQUFRLENBQUMsTUFBTSxDQUNiLENBQUMsU0FBZ0IsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUIsR0FBRyxTQUFTO1FBQ1osR0FBRyxDQUFDLE9BQU8sT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7S0FDbEUsQ0FBQyxFQUNGLFlBQVksQ0FDYixDQUNGLENBQUM7SUFFRixjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQ3RCLFdBQStCO0lBRS9CLE9BQU8sV0FBVyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQ3hCLFdBQStCLEVBQy9CLE9BQTRCLEVBQzVCLE1BQWdDO0lBRWhDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDdEIsd0JBQXdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sRUFBRSxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFNUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFL0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRCxVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTlCLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUNyQixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQ2xCLFdBQStCO0lBRS9CLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDL0UsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUNyQixXQUErQjtJQUUvQixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFMUMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDckQsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pCLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQ2pCLFdBQStCLEVBQy9CLE9BQTRCO0lBRTVCLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQVcsRUFBRTtRQUM5RCxHQUFHLFFBQVE7UUFDWCxPQUFPO0tBQ1IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUNwQixXQUErQixFQUMvQixPQUE0QjtJQUU1QixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsY0FBYyxDQUFDLEdBQUcsQ0FDaEIsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBVyxFQUMzQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQ3RDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXNzZXJ0SW5JbmplY3Rpb25Db250ZXh0LFxuICBEZXN0cm95UmVmLFxuICBpbmplY3QsXG4gIEluamVjdG9yLFxuICBTaWduYWwsXG4gIHVudHJhY2tlZCxcbiAgV3JpdGFibGVTaWduYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU0lHTkFMIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9wcmltaXRpdmVzL3NpZ25hbHMnO1xuaW1wb3J0IHsgUHJldHRpZnkgfSBmcm9tICcuL3RzLWhlbHBlcnMnO1xuXG5jb25zdCBTVEFURV9XQVRDSEVSUyA9IG5ldyBXZWFrTWFwPG9iamVjdCwgQXJyYXk8U3RhdGVXYXRjaGVyPGFueT4+PigpO1xuXG5leHBvcnQgY29uc3QgU1RBVEVfU09VUkNFID0gU3ltYm9sKCdTVEFURV9TT1VSQ0UnKTtcblxuZXhwb3J0IHR5cGUgV3JpdGFibGVTdGF0ZVNvdXJjZTxTdGF0ZSBleHRlbmRzIG9iamVjdD4gPSB7XG4gIFtTVEFURV9TT1VSQ0VdOiBXcml0YWJsZVNpZ25hbDxTdGF0ZT47XG59O1xuXG5leHBvcnQgdHlwZSBTdGF0ZVNvdXJjZTxTdGF0ZSBleHRlbmRzIG9iamVjdD4gPSB7XG4gIFtTVEFURV9TT1VSQ0VdOiBTaWduYWw8U3RhdGU+O1xufTtcblxuZXhwb3J0IHR5cGUgUGFydGlhbFN0YXRlVXBkYXRlcjxTdGF0ZSBleHRlbmRzIG9iamVjdD4gPSAoXG4gIHN0YXRlOiBTdGF0ZVxuKSA9PiBQYXJ0aWFsPFN0YXRlPjtcblxuZXhwb3J0IHR5cGUgU3RhdGVXYXRjaGVyPFN0YXRlIGV4dGVuZHMgb2JqZWN0PiA9IChcbiAgc3RhdGU6IE5vSW5mZXI8U3RhdGU+XG4pID0+IHZvaWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaFN0YXRlPFN0YXRlIGV4dGVuZHMgb2JqZWN0PihcbiAgc3RhdGVTb3VyY2U6IFdyaXRhYmxlU3RhdGVTb3VyY2U8U3RhdGU+LFxuICAuLi51cGRhdGVyczogQXJyYXk8XG4gICAgUGFydGlhbDxQcmV0dGlmeTxTdGF0ZT4+IHwgUGFydGlhbFN0YXRlVXBkYXRlcjxQcmV0dGlmeTxTdGF0ZT4+XG4gID5cbik6IHZvaWQge1xuICBzdGF0ZVNvdXJjZVtTVEFURV9TT1VSQ0VdLnVwZGF0ZSgoY3VycmVudFN0YXRlKSA9PlxuICAgIHVwZGF0ZXJzLnJlZHVjZShcbiAgICAgIChuZXh0U3RhdGU6IFN0YXRlLCB1cGRhdGVyKSA9PiAoe1xuICAgICAgICAuLi5uZXh0U3RhdGUsXG4gICAgICAgIC4uLih0eXBlb2YgdXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IHVwZGF0ZXIobmV4dFN0YXRlKSA6IHVwZGF0ZXIpLFxuICAgICAgfSksXG4gICAgICBjdXJyZW50U3RhdGVcbiAgICApXG4gICk7XG5cbiAgbm90aWZ5V2F0Y2hlcnMoc3RhdGVTb3VyY2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGU8U3RhdGUgZXh0ZW5kcyBvYmplY3Q+KFxuICBzdGF0ZVNvdXJjZTogU3RhdGVTb3VyY2U8U3RhdGU+XG4pOiBTdGF0ZSB7XG4gIHJldHVybiBzdGF0ZVNvdXJjZVtTVEFURV9TT1VSQ0VdKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXRjaFN0YXRlPFN0YXRlIGV4dGVuZHMgb2JqZWN0PihcbiAgc3RhdGVTb3VyY2U6IFN0YXRlU291cmNlPFN0YXRlPixcbiAgd2F0Y2hlcjogU3RhdGVXYXRjaGVyPFN0YXRlPixcbiAgY29uZmlnPzogeyBpbmplY3Rvcj86IEluamVjdG9yIH1cbik6IHsgZGVzdHJveSgpOiB2b2lkIH0ge1xuICBpZiAoIWNvbmZpZz8uaW5qZWN0b3IpIHtcbiAgICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQod2F0Y2hTdGF0ZSk7XG4gIH1cblxuICBjb25zdCBpbmplY3RvciA9IGNvbmZpZz8uaW5qZWN0b3IgPz8gaW5qZWN0KEluamVjdG9yKTtcbiAgY29uc3QgZGVzdHJveVJlZiA9IGluamVjdG9yLmdldChEZXN0cm95UmVmKTtcblxuICBhZGRXYXRjaGVyKHN0YXRlU291cmNlLCB3YXRjaGVyKTtcbiAgd2F0Y2hlcihnZXRTdGF0ZShzdGF0ZVNvdXJjZSkpO1xuXG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiByZW1vdmVXYXRjaGVyKHN0YXRlU291cmNlLCB3YXRjaGVyKTtcbiAgZGVzdHJveVJlZi5vbkRlc3Ryb3koZGVzdHJveSk7XG5cbiAgcmV0dXJuIHsgZGVzdHJveSB9O1xufVxuXG5mdW5jdGlvbiBnZXRXYXRjaGVyczxTdGF0ZSBleHRlbmRzIG9iamVjdD4oXG4gIHN0YXRlU291cmNlOiBTdGF0ZVNvdXJjZTxTdGF0ZT5cbik6IEFycmF5PFN0YXRlV2F0Y2hlcjxTdGF0ZT4+IHtcbiAgcmV0dXJuIFNUQVRFX1dBVENIRVJTLmdldChzdGF0ZVNvdXJjZVtTVEFURV9TT1VSQ0VdW1NJR05BTF0gYXMgb2JqZWN0KSB8fCBbXTtcbn1cblxuZnVuY3Rpb24gbm90aWZ5V2F0Y2hlcnM8U3RhdGUgZXh0ZW5kcyBvYmplY3Q+KFxuICBzdGF0ZVNvdXJjZTogU3RhdGVTb3VyY2U8U3RhdGU+XG4pOiB2b2lkIHtcbiAgY29uc3Qgd2F0Y2hlcnMgPSBnZXRXYXRjaGVycyhzdGF0ZVNvdXJjZSk7XG5cbiAgZm9yIChjb25zdCB3YXRjaGVyIG9mIHdhdGNoZXJzKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB1bnRyYWNrZWQoKCkgPT4gZ2V0U3RhdGUoc3RhdGVTb3VyY2UpKTtcbiAgICB3YXRjaGVyKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRXYXRjaGVyPFN0YXRlIGV4dGVuZHMgb2JqZWN0PihcbiAgc3RhdGVTb3VyY2U6IFN0YXRlU291cmNlPFN0YXRlPixcbiAgd2F0Y2hlcjogU3RhdGVXYXRjaGVyPFN0YXRlPlxuKTogdm9pZCB7XG4gIGNvbnN0IHdhdGNoZXJzID0gZ2V0V2F0Y2hlcnMoc3RhdGVTb3VyY2UpO1xuICBTVEFURV9XQVRDSEVSUy5zZXQoc3RhdGVTb3VyY2VbU1RBVEVfU09VUkNFXVtTSUdOQUxdIGFzIG9iamVjdCwgW1xuICAgIC4uLndhdGNoZXJzLFxuICAgIHdhdGNoZXIsXG4gIF0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVXYXRjaGVyPFN0YXRlIGV4dGVuZHMgb2JqZWN0PihcbiAgc3RhdGVTb3VyY2U6IFN0YXRlU291cmNlPFN0YXRlPixcbiAgd2F0Y2hlcjogU3RhdGVXYXRjaGVyPFN0YXRlPlxuKTogdm9pZCB7XG4gIGNvbnN0IHdhdGNoZXJzID0gZ2V0V2F0Y2hlcnMoc3RhdGVTb3VyY2UpO1xuICBTVEFURV9XQVRDSEVSUy5zZXQoXG4gICAgc3RhdGVTb3VyY2VbU1RBVEVfU09VUkNFXVtTSUdOQUxdIGFzIG9iamVjdCxcbiAgICB3YXRjaGVycy5maWx0ZXIoKHcpID0+IHcgIT09IHdhdGNoZXIpXG4gICk7XG59XG4iXX0=