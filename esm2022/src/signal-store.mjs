import { DestroyRef, inject, Injectable, Injector, runInInjectionContext, signal, } from '@angular/core';
import { STATE_SIGNAL } from './signal-state';
import * as i0 from "@angular/core";
export function signalStore(...args) {
    const signalStoreArgs = [...args];
    const config = 'providedIn' in signalStoreArgs[0]
        ? signalStoreArgs.shift()
        : {};
    const features = signalStoreArgs;
    class SignalStore {
        constructor() {
            const innerStore = features.reduce((store, feature) => feature(store), getInitialInnerStore());
            const { slices, signals, methods, hooks } = innerStore;
            const props = { ...slices, ...signals, ...methods };
            this[STATE_SIGNAL] = innerStore[STATE_SIGNAL];
            for (const key in props) {
                this[key] = props[key];
            }
            if (hooks.onInit) {
                hooks.onInit();
            }
            if (hooks.onDestroy) {
                const injector = inject(Injector);
                inject(DestroyRef).onDestroy(() => {
                    runInInjectionContext(injector, hooks.onDestroy);
                });
            }
        }
        /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.0-next.8", ngImport: i0, type: SignalStore, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.0-next.8", ngImport: i0, type: SignalStore, providedIn: config.providedIn || null });
    }
    i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.0-next.8", ngImport: i0, type: SignalStore, decorators: [{
                type: Injectable,
                args: [{ providedIn: config.providedIn || null }]
            }], ctorParameters: () => [] });
    return SignalStore;
}
export function getInitialInnerStore() {
    return {
        [STATE_SIGNAL]: signal({}),
        slices: {},
        signals: {},
        methods: {},
        hooks: {},
    };
}
//# sourceMappingURL=data:application/json;base64,