import { DidMutate, } from './models';
const defaultSelectId = (entity) => entity.id;
export function getEntityIdSelector(config) {
    return config?.selectId ?? defaultSelectId;
}
export function getEntityStateKeys(config) {
    const collection = config?.collection;
    const entityMapKey = collection === undefined ? 'entityMap' : `${collection}EntityMap`;
    const idsKey = collection === undefined ? 'ids' : `${collection}Ids`;
    const entitiesKey = collection === undefined ? 'entities' : `${collection}Entities`;
    return { entityMapKey, idsKey, entitiesKey };
}
export function cloneEntityState(state, stateKeys) {
    return {
        entityMap: { ...state[stateKeys.entityMapKey] },
        ids: [...state[stateKeys.idsKey]],
    };
}
export function getEntityUpdaterResult(state, stateKeys, didMutate) {
    switch (didMutate) {
        case DidMutate.Both: {
            return {
                [stateKeys.entityMapKey]: state.entityMap,
                [stateKeys.idsKey]: state.ids,
            };
        }
        case DidMutate.Entities: {
            return { [stateKeys.entityMapKey]: state.entityMap };
        }
        default: {
            return {};
        }
    }
}
export function addEntityMutably(state, entity, selectId) {
    const id = selectId(entity);
    if (state.entityMap[id]) {
        return DidMutate.None;
    }
    state.entityMap[id] = entity;
    state.ids.push(id);
    return DidMutate.Both;
}
export function addEntitiesMutably(state, entities, selectId) {
    let didMutate = DidMutate.None;
    for (const entity of entities) {
        const result = addEntityMutably(state, entity, selectId);
        if (result === DidMutate.Both) {
            didMutate = result;
        }
    }
    return didMutate;
}
export function setEntityMutably(state, entity, selectId) {
    const id = selectId(entity);
    if (state.entityMap[id]) {
        state.entityMap[id] = entity;
        return DidMutate.Entities;
    }
    state.entityMap[id] = entity;
    state.ids.push(id);
    return DidMutate.Both;
}
export function setEntitiesMutably(state, entities, selectId) {
    let didMutate = DidMutate.None;
    for (const entity of entities) {
        const result = setEntityMutably(state, entity, selectId);
        if (didMutate === DidMutate.Both) {
            continue;
        }
        didMutate = result;
    }
    return didMutate;
}
export function removeEntitiesMutably(state, idsOrPredicate) {
    const ids = Array.isArray(idsOrPredicate)
        ? idsOrPredicate
        : state.ids.filter((id) => idsOrPredicate(state.entityMap[id]));
    let didMutate = DidMutate.None;
    for (const id of ids) {
        if (state.entityMap[id]) {
            delete state.entityMap[id];
            didMutate = DidMutate.Both;
        }
    }
    if (didMutate === DidMutate.Both) {
        state.ids = state.ids.filter((id) => id in state.entityMap);
    }
    return didMutate;
}
export function updateEntitiesMutably(state, idsOrPredicate, changes, selectId) {
    const ids = Array.isArray(idsOrPredicate)
        ? idsOrPredicate
        : state.ids.filter((id) => idsOrPredicate(state.entityMap[id]));
    let newIds = undefined;
    let didMutate = DidMutate.None;
    for (const id of ids) {
        const entity = state.entityMap[id];
        if (entity) {
            const changesRecord = typeof changes === 'function' ? changes(entity) : changes;
            state.entityMap[id] = { ...entity, ...changesRecord };
            didMutate = DidMutate.Entities;
            const newId = selectId(state.entityMap[id]);
            if (newId !== id) {
                state.entityMap[newId] = state.entityMap[id];
                delete state.entityMap[id];
                newIds = newIds || {};
                newIds[id] = newId;
            }
        }
    }
    if (newIds) {
        state.ids = state.ids.map((id) => newIds[id] ?? id);
        didMutate = DidMutate.Both;
    }
    if (ngDevMode && state.ids.length !== Object.keys(state.entityMap).length) {
        console.warn('@ngrx/signals/entities: Entities with IDs:', ids, 'are not updated correctly.', 'Make sure to apply valid changes when using `updateEntity`,', '`updateEntities`, and `updateAllEntities` updaters.');
    }
    return didMutate;
}
//# sourceMappingURL=data:application/json;base64,