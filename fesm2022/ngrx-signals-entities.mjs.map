{
  "version": 3,
  "sources": ["../../../../modules/signals/entities/src/models.ts", "../../../../modules/signals/entities/src/helpers.ts", "../../../../modules/signals/entities/src/updaters/add-entity.ts", "../../../../modules/signals/entities/src/updaters/add-entities.ts", "../../../../modules/signals/entities/src/updaters/remove-entity.ts", "../../../../modules/signals/entities/src/updaters/remove-entities.ts", "../../../../modules/signals/entities/src/updaters/remove-all-entities.ts", "../../../../modules/signals/entities/src/updaters/set-entity.ts", "../../../../modules/signals/entities/src/updaters/set-entities.ts", "../../../../modules/signals/entities/src/updaters/set-all-entities.ts", "../../../../modules/signals/entities/src/updaters/update-entity.ts", "../../../../modules/signals/entities/src/updaters/update-entities.ts", "../../../../modules/signals/entities/src/updaters/update-all-entities.ts", "../../../../modules/signals/entities/src/with-entities.ts"],
  "sourcesContent": ["import { Signal } from '@angular/core';\n\nexport type EntityId = string | number;\n\nexport type EntityMap<Entity> = Record<EntityId, Entity>;\n\nexport type EntityState<Entity> = {\n  entityMap: EntityMap<Entity>;\n  ids: EntityId[];\n};\n\nexport type NamedEntityState<Entity, Collection extends string> = {\n  [K in keyof EntityState<Entity> as `${Collection}${Capitalize<K>}`]: EntityState<Entity>[K];\n};\n\nexport type EntitySignals<Entity> = {\n  entities: Signal<Entity[]>;\n};\n\nexport type NamedEntitySignals<Entity, Collection extends string> = {\n  [K in keyof EntitySignals<Entity> as `${Collection}${Capitalize<K>}`]: EntitySignals<Entity>[K];\n};\n\nexport type EntityIdProps<Entity> = {\n  [K in keyof Entity as Entity[K] extends EntityId ? K : never]: Entity[K];\n};\n\nexport type EntityIdKey<Entity> = keyof EntityIdProps<Entity> & string;\n\nexport type EntityPredicate<Entity> = (entity: Entity) => boolean;\n\nexport type EntityChanges<Entity> =\n  | Partial<Entity>\n  | ((entity: Entity) => Partial<Entity>);\n\nexport enum DidMutate {\n  None,\n  Entities,\n  Both,\n}\n", "import {\n  DidMutate,\n  EntityChanges,\n  EntityId,\n  EntityPredicate,\n  EntityState,\n} from './models';\n\nexport function getEntityIdKey(config?: { idKey?: string }): string {\n  return config?.idKey ?? 'id';\n}\n\nexport function getEntityStateKeys(config?: { collection?: string }): {\n  entityMapKey: string;\n  idsKey: string;\n  entitiesKey: string;\n} {\n  const collection = config?.collection;\n  const entityMapKey =\n    collection === undefined ? 'entityMap' : `${collection}EntityMap`;\n  const idsKey = collection === undefined ? 'ids' : `${collection}Ids`;\n  const entitiesKey =\n    collection === undefined ? 'entities' : `${collection}Entities`;\n\n  return { entityMapKey, idsKey, entitiesKey };\n}\n\nexport function cloneEntityState(\n  state: Record<string, any>,\n  stateKeys: {\n    entityMapKey: string;\n    idsKey: string;\n  }\n): EntityState<any> {\n  return {\n    entityMap: { ...state[stateKeys.entityMapKey] },\n    ids: [...state[stateKeys.idsKey]],\n  };\n}\n\nexport function getEntityUpdaterResult(\n  state: EntityState<any>,\n  stateKeys: {\n    entityMapKey: string;\n    idsKey: string;\n  },\n  didMutate: DidMutate\n): Record<string, any> {\n  switch (didMutate) {\n    case DidMutate.Both: {\n      return {\n        [stateKeys.entityMapKey]: state.entityMap,\n        [stateKeys.idsKey]: state.ids,\n      };\n    }\n    case DidMutate.Entities: {\n      return { [stateKeys.entityMapKey]: state.entityMap };\n    }\n    default: {\n      return {};\n    }\n  }\n}\n\nexport function addEntityMutably(\n  state: EntityState<any>,\n  entity: any,\n  idKey: string\n): DidMutate {\n  const id = entity[idKey];\n\n  if (state.entityMap[id]) {\n    return DidMutate.None;\n  }\n\n  state.entityMap[id] = entity;\n  state.ids.push(id);\n\n  return DidMutate.Both;\n}\n\nexport function addEntitiesMutably(\n  state: EntityState<any>,\n  entities: any[],\n  idKey: string\n): DidMutate {\n  let didMutate = DidMutate.None;\n\n  for (const entity of entities) {\n    const result = addEntityMutably(state, entity, idKey);\n\n    if (result === DidMutate.Both) {\n      didMutate = result;\n    }\n  }\n\n  return didMutate;\n}\n\nexport function setEntityMutably(\n  state: EntityState<any>,\n  entity: any,\n  idKey: string\n): DidMutate {\n  const id = entity[idKey];\n\n  if (state.entityMap[id]) {\n    state.entityMap[id] = entity;\n    return DidMutate.Entities;\n  }\n\n  state.entityMap[id] = entity;\n  state.ids.push(id);\n\n  return DidMutate.Both;\n}\n\nexport function setEntitiesMutably(\n  state: EntityState<any>,\n  entities: any[],\n  idKey: string\n): DidMutate {\n  let didMutate = DidMutate.None;\n\n  for (const entity of entities) {\n    const result = setEntityMutably(state, entity, idKey);\n\n    if (didMutate === DidMutate.Both) {\n      continue;\n    }\n\n    didMutate = result;\n  }\n\n  return didMutate;\n}\n\nexport function removeEntitiesMutably(\n  state: EntityState<any>,\n  idsOrPredicate: EntityId[] | EntityPredicate<any>\n): DidMutate {\n  const ids = Array.isArray(idsOrPredicate)\n    ? idsOrPredicate\n    : state.ids.filter((id) => idsOrPredicate(state.entityMap[id]));\n  let didMutate = DidMutate.None;\n\n  for (const id of ids) {\n    if (state.entityMap[id]) {\n      delete state.entityMap[id];\n      didMutate = DidMutate.Both;\n    }\n  }\n\n  if (didMutate === DidMutate.Both) {\n    state.ids = state.ids.filter((id) => id in state.entityMap);\n  }\n\n  return didMutate;\n}\n\nexport function updateEntitiesMutably(\n  state: EntityState<any>,\n  idsOrPredicate: EntityId[] | EntityPredicate<any>,\n  changes: EntityChanges<any>\n): DidMutate {\n  const ids = Array.isArray(idsOrPredicate)\n    ? idsOrPredicate\n    : state.ids.filter((id) => idsOrPredicate(state.entityMap[id]));\n  let didMutate = DidMutate.None;\n\n  for (const id of ids) {\n    const entity = state.entityMap[id];\n\n    if (entity) {\n      const changesRecord =\n        typeof changes === 'function' ? changes(entity) : changes;\n      state.entityMap[id] = { ...entity, ...changesRecord };\n      didMutate = DidMutate.Entities;\n    }\n  }\n\n  return didMutate;\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityId,\n  EntityIdKey,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  addEntityMutably,\n  cloneEntityState,\n  getEntityIdKey,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n} from '../helpers';\n\nexport function addEntity<Entity extends { id: EntityId }>(\n  entity: Entity\n): PartialStateUpdater<EntityState<Entity>>;\nexport function addEntity<Entity, Collection extends string>(\n  entity: Entity,\n  config: { collection: Collection; idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function addEntity<\n  Entity extends { id: EntityId },\n  Collection extends string\n>(\n  entity: Entity,\n  config: { collection: Collection }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function addEntity<Entity>(\n  entity: Entity,\n  config: { idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<EntityState<Entity>>;\nexport function addEntity(\n  entity: any,\n  config?: { collection?: string; idKey?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const idKey = getEntityIdKey(config);\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = addEntityMutably(clonedState, entity, idKey);\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityId,\n  EntityIdKey,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  addEntitiesMutably,\n  cloneEntityState,\n  getEntityIdKey,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n} from '../helpers';\n\nexport function addEntities<Entity extends { id: EntityId }>(\n  entities: Entity[]\n): PartialStateUpdater<EntityState<Entity>>;\nexport function addEntities<Entity, Collection extends string>(\n  entities: Entity[],\n  config: { collection: Collection; idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function addEntities<\n  Entity extends { id: EntityId },\n  Collection extends string\n>(\n  entities: Entity[],\n  config: { collection: Collection }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function addEntities<Entity>(\n  entities: Entity[],\n  config: { idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<EntityState<Entity>>;\nexport function addEntities(\n  entities: any[],\n  config?: { collection?: string; idKey?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const idKey = getEntityIdKey(config);\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = addEntitiesMutably(clonedState, entities, idKey);\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport { EntityId, EntityState, NamedEntityState } from '../models';\nimport {\n  cloneEntityState,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n  removeEntitiesMutably,\n} from '../helpers';\n\nexport function removeEntity(\n  id: EntityId\n): PartialStateUpdater<EntityState<any>>;\nexport function removeEntity<Collection extends string>(\n  id: EntityId,\n  config: { collection: Collection }\n): PartialStateUpdater<NamedEntityState<any, Collection>>;\nexport function removeEntity(\n  id: EntityId,\n  config?: { collection?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = removeEntitiesMutably(clonedState, [id]);\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityId,\n  EntityPredicate,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  cloneEntityState,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n  removeEntitiesMutably,\n} from '../helpers';\n\nexport function removeEntities(\n  ids: EntityId[]\n): PartialStateUpdater<EntityState<any>>;\nexport function removeEntities<Entity>(\n  predicate: EntityPredicate<Entity>\n): PartialStateUpdater<EntityState<Entity>>;\nexport function removeEntities<Collection extends string>(\n  ids: EntityId[],\n  config: { collection: Collection }\n): PartialStateUpdater<NamedEntityState<any, Collection>>;\nexport function removeEntities<\n  Collection extends string,\n  State extends NamedEntityState<any, Collection>,\n  Entity = State extends NamedEntityState<infer E, Collection> ? E : never\n>(\n  predicate: EntityPredicate<Entity>,\n  config: { collection: Collection }\n): PartialStateUpdater<State>;\nexport function removeEntities(\n  idsOrPredicate: EntityId[] | EntityPredicate<any>,\n  config?: { collection?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = removeEntitiesMutably(clonedState, idsOrPredicate);\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport { EntityState, NamedEntityState } from '../models';\nimport { getEntityStateKeys } from '../helpers';\n\nexport function removeAllEntities(): PartialStateUpdater<EntityState<any>>;\nexport function removeAllEntities<Collection extends string>(config: {\n  collection: Collection;\n}): PartialStateUpdater<NamedEntityState<any, Collection>>;\nexport function removeAllEntities(config?: {\n  collection?: string;\n}): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const stateKeys = getEntityStateKeys(config);\n\n  return () => ({\n    [stateKeys.entityMapKey]: {},\n    [stateKeys.idsKey]: [],\n  });\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityId,\n  EntityIdKey,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  cloneEntityState,\n  getEntityIdKey,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n  setEntityMutably,\n} from '../helpers';\n\nexport function setEntity<Entity extends { id: EntityId }>(\n  entity: Entity\n): PartialStateUpdater<EntityState<Entity>>;\nexport function setEntity<Entity, Collection extends string>(\n  entity: Entity,\n  config: { collection: Collection; idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function setEntity<\n  Entity extends { id: EntityId },\n  Collection extends string\n>(\n  entity: Entity,\n  config: { collection: Collection }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function setEntity<Entity>(\n  entity: Entity,\n  config: { idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<EntityState<Entity>>;\nexport function setEntity(\n  entity: any,\n  config?: { collection?: string; idKey?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const idKey = getEntityIdKey(config);\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = setEntityMutably(clonedState, entity, idKey);\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityId,\n  EntityIdKey,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  cloneEntityState,\n  getEntityIdKey,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n  setEntitiesMutably,\n} from '../helpers';\n\nexport function setEntities<Entity extends { id: EntityId }>(\n  entities: Entity[]\n): PartialStateUpdater<EntityState<Entity>>;\nexport function setEntities<Entity, Collection extends string>(\n  entities: Entity[],\n  config: { collection: Collection; idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function setEntities<\n  Entity extends { id: EntityId },\n  Collection extends string\n>(\n  entities: Entity[],\n  config: { collection: Collection }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function setEntities<Entity>(\n  entities: Entity[],\n  config: { idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<EntityState<Entity>>;\nexport function setEntities(\n  entities: any[],\n  config?: { collection?: string; idKey?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const idKey = getEntityIdKey(config);\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = setEntitiesMutably(clonedState, entities, idKey);\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityId,\n  EntityIdKey,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  getEntityIdKey,\n  getEntityStateKeys,\n  setEntitiesMutably,\n} from '../helpers';\n\nexport function setAllEntities<Entity extends { id: EntityId }>(\n  entities: Entity[]\n): PartialStateUpdater<EntityState<Entity>>;\nexport function setAllEntities<Entity, Collection extends string>(\n  entities: Entity[],\n  config: { collection: Collection; idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function setAllEntities<\n  Entity extends { id: EntityId },\n  Collection extends string\n>(\n  entities: Entity[],\n  config: { collection: Collection }\n): PartialStateUpdater<NamedEntityState<Entity, Collection>>;\nexport function setAllEntities<Entity>(\n  entities: Entity[],\n  config: { idKey: EntityIdKey<Entity> }\n): PartialStateUpdater<EntityState<Entity>>;\nexport function setAllEntities(\n  entities: any[],\n  config?: { collection?: string; idKey?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const idKey = getEntityIdKey(config);\n  const stateKeys = getEntityStateKeys(config);\n\n  return () => {\n    const state: EntityState<any> = { entityMap: {}, ids: [] };\n    setEntitiesMutably(state, entities, idKey);\n\n    return {\n      [stateKeys.entityMapKey]: state.entityMap,\n      [stateKeys.idsKey]: state.ids,\n    };\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityChanges,\n  EntityId,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  cloneEntityState,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n  updateEntitiesMutably,\n} from '../helpers';\n\nexport function updateEntity<Entity>(update: {\n  id: EntityId;\n  changes: EntityChanges<Entity & {}>;\n}): PartialStateUpdater<EntityState<Entity>>;\nexport function updateEntity<\n  Collection extends string,\n  State extends NamedEntityState<any, Collection>,\n  Entity = State extends NamedEntityState<infer E, Collection> ? E : never\n>(\n  update: {\n    id: EntityId;\n    changes: EntityChanges<Entity & {}>;\n  },\n  config: { collection: Collection }\n): PartialStateUpdater<State>;\nexport function updateEntity(\n  update: {\n    id: EntityId;\n    changes: EntityChanges<any>;\n  },\n  config?: { collection?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = updateEntitiesMutably(\n      clonedState,\n      [update.id],\n      update.changes\n    );\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport {\n  EntityChanges,\n  EntityId,\n  EntityPredicate,\n  EntityState,\n  NamedEntityState,\n} from '../models';\nimport {\n  cloneEntityState,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n  updateEntitiesMutably,\n} from '../helpers';\n\nexport function updateEntities<Entity>(update: {\n  ids: EntityId[];\n  changes: EntityChanges<Entity & {}>;\n}): PartialStateUpdater<EntityState<Entity>>;\nexport function updateEntities<Entity>(update: {\n  predicate: EntityPredicate<Entity>;\n  changes: EntityChanges<Entity & {}>;\n}): PartialStateUpdater<EntityState<Entity>>;\nexport function updateEntities<\n  Collection extends string,\n  State extends NamedEntityState<any, Collection>,\n  Entity = State extends NamedEntityState<infer E, Collection> ? E : never\n>(\n  update: {\n    ids: EntityId[];\n    changes: EntityChanges<Entity & {}>;\n  },\n  config: { collection: Collection }\n): PartialStateUpdater<State>;\nexport function updateEntities<\n  Collection extends string,\n  State extends NamedEntityState<any, Collection>,\n  Entity = State extends NamedEntityState<infer E, Collection> ? E : never\n>(\n  update: {\n    predicate: EntityPredicate<Entity>;\n    changes: EntityChanges<Entity & {}>;\n  },\n  config: { collection: Collection }\n): PartialStateUpdater<State>;\nexport function updateEntities(\n  update: ({ ids: EntityId[] } | { predicate: EntityPredicate<any> }) & {\n    changes: EntityChanges<any>;\n  },\n  config?: { collection?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const stateKeys = getEntityStateKeys(config);\n  const idsOrPredicate = 'ids' in update ? update.ids : update.predicate;\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = updateEntitiesMutably(\n      clonedState,\n      idsOrPredicate,\n      update.changes\n    );\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { PartialStateUpdater } from '@ngrx/signals';\nimport { EntityChanges, EntityState, NamedEntityState } from '../models';\nimport {\n  cloneEntityState,\n  getEntityStateKeys,\n  getEntityUpdaterResult,\n  updateEntitiesMutably,\n} from '../helpers';\n\nexport function updateAllEntities<Entity>(\n  changes: EntityChanges<Entity & {}>\n): PartialStateUpdater<EntityState<Entity>>;\nexport function updateAllEntities<\n  Collection extends string,\n  State extends NamedEntityState<any, Collection>,\n  Entity = State extends NamedEntityState<infer E, Collection> ? E : never\n>(\n  changes: EntityChanges<Entity & {}>,\n  config: { collection: Collection }\n): PartialStateUpdater<State>;\nexport function updateAllEntities(\n  changes: EntityChanges<any>,\n  config?: { collection?: string }\n): PartialStateUpdater<EntityState<any> | NamedEntityState<any, string>> {\n  const stateKeys = getEntityStateKeys(config);\n\n  return (state) => {\n    const clonedState = cloneEntityState(state, stateKeys);\n    const didMutate = updateEntitiesMutably(\n      clonedState,\n      (state as Record<string, any>)[stateKeys.idsKey],\n      changes\n    );\n\n    return getEntityUpdaterResult(clonedState, stateKeys, didMutate);\n  };\n}\n", "import { computed, Signal } from '@angular/core';\nimport {\n  SignalStoreFeature,\n  signalStoreFeature,\n  withComputed,\n  withState,\n} from '@ngrx/signals';\nimport {\n  EntityId,\n  EntityMap,\n  EntitySignals,\n  EntityState,\n  NamedEntitySignals,\n  NamedEntityState,\n} from './models';\nimport { getEntityStateKeys } from './helpers';\n\nexport function withEntities<Entity>(): SignalStoreFeature<\n  { state: {}; signals: {}; methods: {} },\n  {\n    state: EntityState<Entity>;\n    signals: EntitySignals<Entity>;\n    methods: {};\n  }\n>;\nexport function withEntities<Entity, Collection extends string>(config: {\n  entity: Entity;\n  collection: Collection;\n}): SignalStoreFeature<\n  { state: {}; signals: {}; methods: {} },\n  {\n    state: NamedEntityState<Entity, Collection>;\n    signals: NamedEntitySignals<Entity, Collection>;\n    methods: {};\n  }\n>;\nexport function withEntities<Entity>(config: {\n  entity: Entity;\n}): SignalStoreFeature<\n  { state: {}; signals: {}; methods: {} },\n  {\n    state: EntityState<Entity>;\n    signals: EntitySignals<Entity>;\n    methods: {};\n  }\n>;\nexport function withEntities<Entity>(config?: {\n  entity: Entity;\n  collection?: string;\n}): SignalStoreFeature {\n  const { entityMapKey, idsKey, entitiesKey } = getEntityStateKeys(config);\n\n  return signalStoreFeature(\n    withState({\n      [entityMapKey]: {},\n      [idsKey]: [],\n    }),\n    withComputed((store: Record<string, Signal<unknown>>) => ({\n      [entitiesKey]: computed(() => {\n        const entityMap = store[entityMapKey]() as EntityMap<Entity>;\n        const ids = store[idsKey]() as EntityId[];\n\n        return ids.map((id) => entityMap[id]);\n      }),\n    }))\n  );\n}\n"],
  "mappings": "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",
  "names": ["DidMutate"]
}
